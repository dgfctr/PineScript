// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// author & developer : © dg_factor [18.04.2023, Istanbul]

// AÇIKLAMALAR
// Geliştirme amaçlıdır, alım-satım stratejisi yerine ikame edilemez.
// Aşağıdaki komut, girdiğiniz verilere göre bir PNL raporu oluşturur.
// Çoğu aracı kurum işlem esnasında ilgili datayı size sunar, ama örnek hesaplama kenarda bulunsun.
// Risk yönetimi ve strateji geliştirme süreçlerinde yardımı olabilir.

//@version=5
indicator("PnL Raporu", overlay=true)

// Inputs
bakiye         = input.float(defval=1000, title="Bakiye ($)")
kaldirac       = input.int(defval=1, title="Kaldıraç")
komisyon_orani = input.float(defval=0.04, title="Komisyon (%)", step=0.01)
yon            = input.string(defval="Løng", options=["Løng", "Shørt"], title="Yön")
giris_fiyati   = input.float(defval=10.00, title="Giriş Fiyatı ($)")
cikis_fiyati   = input.float(defval=15.00, title="Çıkış Fiyatı ($)")

// Tablo Inputs
tablo_k = input.string(title="Tablo Konum", options=["Sol", "Merkez", "Sağ"], defval="Merkez", group="Tablo")
inputs_renk = input.color(title="Inputs Renk", defval=#006c53, group="Tablo")
rapor_renk = input.color(title="Rapor Renk", defval=#38a3d3, group="Tablo")
ondalik_basamak = input.int(title="Hassasiyet", defval=2, minval=0, maxval=8, group="Tablo", tooltip="Ondalık basamak sayısı")

// Teorik Hesaplama
teorik_bakiye           = bakiye * kaldirac
teorik_komisyon_tutari  = teorik_bakiye * komisyon_orani / 100
nosyonal_buyukluk       = teorik_bakiye - teorik_komisyon_tutari

// Mutlak Hesaplama
kontrat_sayisi          = nosyonal_buyukluk / giris_fiyati
giris_komisyonu         = giris_fiyati * kontrat_sayisi * komisyon_orani / 100
cikis_komisyonu         = cikis_fiyati * kontrat_sayisi * komisyon_orani / 100
toplam_komisyon         = giris_komisyonu + cikis_komisyonu
pozisyon_buyuklugu      = bakiye - giris_komisyonu
net_kar                 = 
  yon == "Løng"  ? (cikis_fiyati - giris_fiyati) * kontrat_sayisi - toplam_komisyon : 
  yon == "Shørt" ? (giris_fiyati - cikis_fiyati) * kontrat_sayisi - toplam_komisyon : na
kar_yuzdesi             = net_kar / bakiye * 100
kac_x                   = (bakiye + net_kar) / bakiye
fiyat_hareketi          = math.abs(giris_fiyati - cikis_fiyati) / giris_fiyati * 100
yon_isareti             = giris_fiyati < cikis_fiyati ? "▲" : "▼"
pnl_renk = net_kar >= 0 ? #00bb00 : #bb0000

// Tablo
tablo_konum = 
  tablo_k == 'Sol'    ? position.top_left   : 
  tablo_k == 'Merkez' ? position.top_center : 
  tablo_k == 'Sağ'    ? position.top_right  : na 
tb_bosluk = '        '
decimal = 
  ondalik_basamak == 0 ? "#" : 
  ondalik_basamak == 1 ? "#.#" : 
  ondalik_basamak == 2 ? "#.##" : 
  ondalik_basamak == 3 ? "#.###" : 
  ondalik_basamak == 4 ? "#.####" : 
  ondalik_basamak == 5 ? "#.#####" : 
  ondalik_basamak == 6 ? "#.######" : 
  ondalik_basamak == 7 ? "#.#######" : 
  ondalik_basamak == 8 ? "#.########" : na
var table tablo = table.new(position=tablo_konum, columns=3, rows=20)
f_table(x, y, c, t) =>
    table.cell(column=x, row=y-1, text_color=c, text=t, table_id=tablo, text_size=size.normal, text_halign=text.align_left)
if barstate.islast
    f_table(0, 1, #00000000, '')
    f_table(0, 2, #686868, '─ INPUTS ─' + tb_bosluk)
    f_table(0, 3, #00000000, '')
    f_table(0, 4, inputs_renk, 'Bakiye : ' + str.tostring(bakiye) + " $")
    f_table(0, 5, inputs_renk, 'Kaldıraç : ' + str.tostring(kaldirac))
    f_table(0, 6, inputs_renk, 'Komisyon : % ' + str.tostring(komisyon_orani))
    f_table(0, 7, inputs_renk, 'Giriş Fiyatı : ' + str.tostring(giris_fiyati) + " $" + tb_bosluk)
    f_table(0, 8, inputs_renk, 'Çıkış Fiyatı : ' + str.tostring(cikis_fiyati) + " $" + tb_bosluk)
    f_table(0, 9, inputs_renk, 'Yön : ' + str.tostring(yon))
    f_table(1, 1, #00000000, '')
    f_table(1, 2, #686868, '─ RAPOR ─')
    f_table(1, 3, #00000000, '')
    f_table(1, 4, #686868, 'Fiyat Hareketi')    
    f_table(1, 5, rapor_renk, '% ' + str.tostring(fiyat_hareketi, "#.## ") + yon_isareti)
    f_table(1, 6, #00000000, '')
    f_table(1, 7, #686868, 'PnL')
    f_table(1, 8, pnl_renk, '% ' + str.tostring(kar_yuzdesi, decimal))
    f_table(1, 9, pnl_renk, '$ ' + str.tostring(net_kar, decimal))
    f_table(1, 10, pnl_renk, 'x ' + str.tostring(kac_x, decimal))
    f_table(1, 11, #00000000, '')
    f_table(1, 12, #686868, 'Komisyon')
    f_table(1, 13, rapor_renk, 'Σ : ' + str.tostring(toplam_komisyon, decimal) + " $")
    f_table(1, 14, rapor_renk, 'Giriş : ' + str.tostring(giris_komisyonu, decimal) + " $")
    f_table(1, 15, rapor_renk, 'Çıkış : ' + str.tostring(cikis_komisyonu, decimal) + " $")
    f_table(1, 16, #00000000, '')
    f_table(1, 17, #686868, 'Size')
    f_table(1, 18, rapor_renk, 'Kontrat : ' + str.tostring(kontrat_sayisi, decimal))
    f_table(1, 19, rapor_renk, 'Pozisyon Büyüklüğü : ' + str.tostring(pozisyon_buyuklugu, decimal) + " $" + tb_bosluk)
//


plotshape(barstate.isfirst, title="dg_factor", color=#13172200, editable=false)
