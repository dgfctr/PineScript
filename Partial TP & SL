// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © dg_factor

// Tanım
//      Bu komut, kademeli stop VEYA kademeli profit çıkışlarında PnL sonucunu hesaplamak ve pozisyon yönetimini kolaylaştırmak amacıyla hazırlanmıştır. 
//      Yardımcı bir komuttur, öneride bulunmaz, doğrudan sinyallerinize adapte edilemez. Adaptif versiyon için iletişime geçebilirsiniz.
//      Stop ve profit seçeneklerinin birlikte kullanılması önerilmez, çünkü; 
//          İşlem sonuçlarını modelleyebilmek için fiyatın önce stop seviyelerine mi yoksa profit seviyelerine mi gideceği bilgisine ihtiyaç vardır. 
//          Dolayısıyla sonuçlar, 'sadece kademeli stop' veya 'sadece kademeli profit' ölçeğinde ele alınmalıdr, stop ve profit arasındaki öncelik-sonralık ilişkisi bu indikatörde gözardı edilmiştir. 
//      Komut, kullanıcının işleme tek seferde girdiğini varsayar, dolayısıyla giriş komisyonu bu çerçevede hesaplanır. 
//      Çıkış komisyonları, (olması gerektiği gibi) her çıkış seviyesi için ayrı ayrı hesaplanır.
//      Yöntem : Kullanıcı doğrudan fiyat ve (yüzdesel) miktar bilgisini girer, PnL otomatik olarak raporlanır.

//@version=6
indicator("Kademeli TP/SL", overlay=true)

// Position Inputs
islem_yonu = input.string("Long ", "İşlem Yönü", options=["Long ", "Short "])
giris_fiyati = input.float(100., "Giriş Fiyatı ($)", minval=0.0001)
pozisyon_tutari = input.float(1000.0, "Pozisyon Tutarı ($)", minval=1)
kaldirac = input.float(5.0, "Kaldıraç", minval=1, maxval=125)
komisyon_oran = input.float(0.05, "Komisyon Oranı (%)", minval=0, step=0.01)

gr_tps = "Take Profit Seviyeleri"
gr_sls = "Stop Loss Seviyeleri"
tt_tp = "En soldaki onay kutucuğunu işaretlediğinizde ilgili seviyedeki take-profit tercihleriniz hesaplamaya dahil edilir.\n\nOrtadaki 'TP $' fiyat parametresidir ve çıkış seviyenizi ifade eder.\n\nEn sağdaki 'QTY %' parametresi ilgili fiyat seviyesinde pozisyonun yüzde kaçını kapatacağınızı ifade eder."
tt_sl = "En soldaki onay kutucuğunu işaretlediğinizde ilgili seviyedeki stop-loss tercihleriniz hesaplamaya dahil edilir.\n\nOrtadaki 'SL $' fiyat parametresidir ve çıkış seviyenizi ifade eder.\n\nEn sağdaki 'QTY %' parametresi ilgili fiyat seviyesinde pozisyonun yüzde kaçını kapatacağınızı ifade eder."

// Take-Profit Inputs
tp_onay_1 = input.bool(true,  "1 ⟶", group=gr_tps, inline="1")
tp_onay_2 = input.bool(true,  "2 ⟶", group=gr_tps, inline="2")
tp_onay_3 = input.bool(true,  "3 ⟶", group=gr_tps, inline="3")
tp_onay_4 = input.bool(false, "4 ⟶", group=gr_tps, inline="4")
tp_onay_5 = input.bool(false, "5 ⟶", group=gr_tps, inline="5")

tp_fiyat_input_1 = tp_onay_1 ? input.float(102.0, "  TP $", step=0.01, group=gr_tps, inline="1") : 0.0
tp_fiyat_input_2 = tp_onay_2 ? input.float(105.0, "  TP $", step=0.01, group=gr_tps, inline="2") : 0.0
tp_fiyat_input_3 = tp_onay_3 ? input.float(108.0, "  TP $", step=0.01, group=gr_tps, inline="3") : 0.0
tp_fiyat_input_4 = tp_onay_4 ? input.float(0.0,   "  TP $", step=0.01, group=gr_tps, inline="4") : 0.0
tp_fiyat_input_5 = tp_onay_5 ? input.float(0.0,   "  TP $", step=0.01, group=gr_tps, inline="5") : 0.0

tp_miktar_yuzde_1 = input.float(30.0, "  QTY %", minval=0, maxval=100, group=gr_tps, inline="1", tooltip=tt_tp)
tp_miktar_yuzde_2 = input.float(30.0, "  QTY %", minval=0, maxval=100, group=gr_tps, inline="2", tooltip=tt_tp)
tp_miktar_yuzde_3 = input.float(40.0, "  QTY %", minval=0, maxval=100, group=gr_tps, inline="3", tooltip=tt_tp)
tp_miktar_yuzde_4 = input.float(0.0,  "  QTY %", minval=0, maxval=100, group=gr_tps, inline="4", tooltip=tt_tp)
tp_miktar_yuzde_5 = input.float(0.0,  "  QTY %", minval=0, maxval=100, group=gr_tps, inline="5", tooltip=tt_tp)

// Stop-Loss Inputs
sl_onay_1 = input.bool(false, "1 ⟶", group=gr_sls, inline="1")
sl_onay_2 = input.bool(false, "2 ⟶", group=gr_sls, inline="2")
sl_onay_3 = input.bool(false, "3 ⟶", group=gr_sls, inline="3")
sl_onay_4 = input.bool(false, "4 ⟶", group=gr_sls, inline="4")
sl_onay_5 = input.bool(false, "5 ⟶", group=gr_sls, inline="5")

sl_fiyat_input_1 = sl_onay_1 ? input.float(98.0, "  SL $", step=0.01, group=gr_sls, inline="1") : 0.0
sl_fiyat_input_2 = sl_onay_2 ? input.float(95.0, "  SL $", step=0.01, group=gr_sls, inline="2") : 0.0
sl_fiyat_input_3 = sl_onay_3 ? input.float(92.0, "  SL $", step=0.01, group=gr_sls, inline="3") : 0.0
sl_fiyat_input_4 = sl_onay_4 ? input.float(0.0,  "  SL $", step=0.01, group=gr_sls, inline="4") : 0.0
sl_fiyat_input_5 = sl_onay_5 ? input.float(0.0,  "  SL $", step=0.01, group=gr_sls, inline="5") : 0.0

sl_miktar_yuzde_1 = input.float(30.0, "  QTY %", minval=0, maxval=100, group=gr_sls, inline="1", tooltip=tt_sl)
sl_miktar_yuzde_2 = input.float(30.0, "  QTY %", minval=0, maxval=100, group=gr_sls, inline="2", tooltip=tt_sl)
sl_miktar_yuzde_3 = input.float(40.0, "  QTY %", minval=0, maxval=100, group=gr_sls, inline="3", tooltip=tt_sl)
sl_miktar_yuzde_4 = input.float(0.0,  "  QTY %", minval=0, maxval=100, group=gr_sls, inline="4", tooltip=tt_sl)
sl_miktar_yuzde_5 = input.float(0.0,  "  QTY %", minval=0, maxval=100, group=gr_sls, inline="5", tooltip=tt_sl)

// Pozisyon Büyüklüğü
kaldiracli_pozisyon = pozisyon_tutari * kaldirac
coin_miktar = kaldiracli_pozisyon / giris_fiyati

// Take-Profit ve Stop-Loss seviyeleri için array'ler
tp_onaylar          = array.from(tp_onay_1, tp_onay_2, tp_onay_3, tp_onay_4, tp_onay_5)
sl_onaylar          = array.from(sl_onay_1, sl_onay_2, sl_onay_3, sl_onay_4, sl_onay_5)
tp_fiyatlar         = array.from(tp_fiyat_input_1, tp_fiyat_input_2, tp_fiyat_input_3, tp_fiyat_input_4, tp_fiyat_input_5)
sl_fiyatlar         = array.from(sl_fiyat_input_1, sl_fiyat_input_2, sl_fiyat_input_3, sl_fiyat_input_4, sl_fiyat_input_5)
tp_miktar_yuzdeler  = array.from(tp_miktar_yuzde_1, tp_miktar_yuzde_2, tp_miktar_yuzde_3, tp_miktar_yuzde_4, tp_miktar_yuzde_5)
sl_miktar_yuzdeler  = array.from(sl_miktar_yuzde_1, sl_miktar_yuzde_2, sl_miktar_yuzde_3, sl_miktar_yuzde_4, sl_miktar_yuzde_5)

// Çıkış Fiyatları ve Quantity
tp_yuzdeler = array.new_float(5)
sl_yuzdeler = array.new_float(5)
for i = 0 to 4
    tp_yuzde = giris_fiyati > 0 ? math.abs(array.get(tp_fiyatlar, i) - giris_fiyati) / giris_fiyati * 100 : 0.0
    sl_yuzde = giris_fiyati > 0 ? math.abs(array.get(sl_fiyatlar, i) - giris_fiyati) / giris_fiyati * 100 : 0.0
    array.set(tp_yuzdeler, i, tp_yuzde)
    array.set(sl_yuzdeler, i, sl_yuzde)

// Levereged Roi
tp_kar_yuzdeler = array.new_float(5)
sl_zarar_yuzdeler = array.new_float(5)
for i = 0 to 4
    tp_kar_yuzde = array.get(tp_yuzdeler, i) * kaldirac
    sl_zarar_yuzde = array.get(sl_yuzdeler, i) * kaldirac
    array.set(tp_kar_yuzdeler, i, tp_kar_yuzde)
    array.set(sl_zarar_yuzdeler, i, sl_zarar_yuzde)

// Komisyonlar
giris_komisyonu = kaldiracli_pozisyon * (komisyon_oran / 100)
komisyon_tp = array.new_float(5)
komisyon_sl = array.new_float(5)
for i = 0 to 4
    komisyon_tp_i = array.get(tp_onaylar, i) ? (coin_miktar * (array.get(tp_miktar_yuzdeler, i) / 100) * array.get(tp_fiyatlar, i)) * (komisyon_oran / 100) : 0
    komisyon_sl_i = array.get(sl_onaylar, i) ? (coin_miktar * (array.get(sl_miktar_yuzdeler, i) / 100) * array.get(sl_fiyatlar, i)) * (komisyon_oran / 100) : 0
    array.set(komisyon_tp, i, komisyon_tp_i)
    array.set(komisyon_sl, i, komisyon_sl_i)
toplam_komisyon_tp = array.sum(komisyon_tp)
toplam_komisyon_sl = array.sum(komisyon_sl)

// PnL
tp_pnl_brut = array.new_float(5)
sl_pnl_brut = array.new_float(5)
for i = 0 to 4
    tp_pnl_brut_i = 0.0
    sl_pnl_brut_i = 0.0
    if islem_yonu == "Long "
        tp_pnl_brut_i := array.get(tp_onaylar, i) ? (coin_miktar * (array.get(tp_miktar_yuzdeler, i) / 100)) * (array.get(tp_fiyatlar, i) - giris_fiyati) : 0.0
        sl_pnl_brut_i := array.get(sl_onaylar, i) ? (coin_miktar * (array.get(sl_miktar_yuzdeler, i) / 100)) * (array.get(sl_fiyatlar, i) - giris_fiyati) : 0.0
    else
        tp_pnl_brut_i := array.get(tp_onaylar, i) ? (coin_miktar * (array.get(tp_miktar_yuzdeler, i) / 100)) * (giris_fiyati - array.get(tp_fiyatlar, i)) : 0.0
        sl_pnl_brut_i := array.get(sl_onaylar, i) ? (coin_miktar * (array.get(sl_miktar_yuzdeler, i) / 100)) * (giris_fiyati - array.get(sl_fiyatlar, i)) : 0.0
    array.set(tp_pnl_brut, i, tp_pnl_brut_i)
    array.set(sl_pnl_brut, i, sl_pnl_brut_i)

tp_pnl = array.new_float(5)
sl_pnl = array.new_float(5)
for i = 0 to 4
    tp_pnl_i = array.get(tp_pnl_brut, i) - array.get(komisyon_tp, i)
    sl_pnl_i = array.get(sl_pnl_brut, i) - array.get(komisyon_sl, i)
    array.set(tp_pnl, i, tp_pnl_i)
    array.set(sl_pnl, i, sl_pnl_i)

// PnL %
tp_pnl_yuzdeler = array.new_float(5)
sl_pnl_yuzdeler = array.new_float(5)
for i = 0 to 4
    tp_pnl_yuzde_i = (pozisyon_tutari > 0 ? array.get(tp_pnl, i) / pozisyon_tutari * 100 : 0)
    sl_pnl_yuzde_i = (pozisyon_tutari > 0 ? array.get(sl_pnl, i) / pozisyon_tutari * 100 : 0)
    array.set(tp_pnl_yuzdeler, i, tp_pnl_yuzde_i)
    array.set(sl_pnl_yuzdeler, i, sl_pnl_yuzde_i)

// PnL Sonuç
tp_pnl_toplam = array.sum(tp_pnl)
sl_pnl_toplam = array.sum(sl_pnl)
net_tp_pnl = tp_pnl_toplam - giris_komisyonu
net_sl_pnl = sl_pnl_toplam - giris_komisyonu
net_tp_pnl_yuzde = pozisyon_tutari > 0 ? (net_tp_pnl / pozisyon_tutari) * 100 : 0
net_sl_pnl_yuzde = pozisyon_tutari > 0 ? (net_sl_pnl / pozisyon_tutari) * 100 : 0

// Miktar
tp_miktar_yuzde_toplam = 0.0
sl_miktar_yuzde_toplam = 0.0
for i = 0 to 4
    if array.get(tp_onaylar, i)
        tp_miktar_yuzde_toplam := tp_miktar_yuzde_toplam + array.get(tp_miktar_yuzdeler, i)
    if array.get(sl_onaylar, i)
        sl_miktar_yuzde_toplam := sl_miktar_yuzde_toplam + array.get(sl_miktar_yuzdeler, i)

// Debug
tp_aktif_var = false
for i = 0 to 4
    if array.get(tp_onaylar, i)
        tp_aktif_var := true
        break
sl_aktif_var = false
for i = 0 to 4
    if array.get(sl_onaylar, i)
        sl_aktif_var := true
        break

tp_miktar_yuzde_hatasi = tp_aktif_var and tp_miktar_yuzde_toplam != 100
sl_miktar_yuzde_hatasi = sl_aktif_var and sl_miktar_yuzde_toplam != 100

// Tablo
gr_tb = "TABLO"
tablo_k = input.int(title="Tablo Konum", defval=3, maxval=3, group=gr_tb)
tablo_konum =
  tablo_k == 1 ? position.bottom_left   :
  tablo_k == 2 ? position.bottom_center :
  tablo_k == 3 ? position.bottom_right  : na
gri     = input.color(#5d606b, "", group=gr_tb, inline="01")
beyaz   = input.color(#d8cece, "", group=gr_tb, inline="01")
yesil   = input.color(#00ff00, "", group=gr_tb, inline="01")
kirmizi = input.color(#f44336, "", group=gr_tb, inline="01")
turkuaz = input.color(#00bcd4, "", group=gr_tb, inline="01")
turuncu = input.color(#ff9800, "", group=gr_tb, inline="01")
var table tb = table.new(tablo_konum, 6, 50, na, gri, 3, gri, 1)

f_title(x, y, c, t, tt) => table.cell(tb, x, y, t, text_color=c, tooltip=tt)
f_print(x, y, c, t, b) =>
    if b
        table.cell(tb, x, y, t, text_color=c, text_halign=text.align_left)
f_merge(x1, y1, x2, y2) => table.merge_cells(tb, x1, y1, x2, y2)

if barstate.islast
    // TP bilgileri
    if tp_aktif_var
        f_title(0, 00, yesil, "Take-Profit Senaryosu", "")  , f_merge(0, 00, 5, 00)
        f_title(0, 01, beyaz, "#", "Çıkış Numarası")
        f_title(1, 01, beyaz, "Fiyat $", "Fiyat Seviyesi")
        f_title(2, 01, beyaz, "FH %", "Fiyat Hareketi")
        f_title(3, 01, beyaz, "QTY %", "Miktar")
        f_title(4, 01, beyaz, "PnL %", "Kâr/Zarar %")
        f_title(5, 01, beyaz, "PnL $", "Kâr/Zarar $")

        for i = 0 to 4
            if array.get(tp_onaylar, i)
                f_print(0, 02 + i, yesil, str.tostring(i+1), true)
                f_print(1, 02 + i, yesil, str.tostring(array.get(tp_fiyatlar, i), "#.##") + " $", true)
                f_print(2, 02 + i, yesil, "% " + str.tostring(array.get(tp_yuzdeler, i), "#.##"), true)
                f_print(3, 02 + i, yesil, "% " + str.tostring(array.get(tp_miktar_yuzdeler, i), "#.##"), true)
                f_print(4, 02 + i, yesil, "% " + str.tostring(array.get(tp_pnl_yuzdeler, i), "#.##"), true)
                f_print(5, 02 + i, yesil, str.tostring(array.get(tp_pnl, i), "#.##") + " $", true)

        f_title(0, 07, beyaz, "TP Sonuç", ""), f_merge(0, 07, 2, 07)
        f_print(3, 07, turkuaz, "% " + str.tostring(tp_miktar_yuzde_toplam, "#.##"), true)
        f_print(4, 07, yesil, "% " + str.tostring(net_tp_pnl_yuzde, "#.##"), true)
        f_print(5, 07, yesil, str.tostring(net_tp_pnl, "#.##") + " $", true)
        f_title(0, 08, beyaz, "* * *", ""), f_merge(0, 08, 5, 08)

    // SL bilgileri
    if sl_aktif_var
        f_title(0, 09, kirmizi, "Stop-Loss Senaryosu", ""), f_merge(0, 09, 5, 09)
        f_title(0, 10, beyaz, "#", "Çıkış Numarası")
        f_title(1, 10, beyaz, "Fiyat $", "Fiyat Seviyesi")
        f_title(2, 10, beyaz, "FH %", "Fiyat Hareketi")
        f_title(3, 10, beyaz, "QTY %", "Miktar")
        f_title(4, 10, beyaz, "PnL %", "Kâr/Zarar %")
        f_title(5, 10, beyaz, "PnL $", "Kâr/Zarar $")

        for i = 0 to 4
            if array.get(sl_onaylar, i)
                f_print(0, 11 + i, kirmizi, str.tostring(i+1), true)
                f_print(1, 11 + i, kirmizi, str.tostring(array.get(sl_fiyatlar, i), "#.##") + " $", true)
                f_print(2, 11 + i, kirmizi, "% " + str.tostring(array.get(sl_yuzdeler, i), "#.##"), true)
                f_print(3, 11 + i, kirmizi, "% " + str.tostring(array.get(sl_miktar_yuzdeler, i), "#.##"), true)
                f_print(4, 11 + i, kirmizi, "% " + str.tostring(array.get(sl_pnl_yuzdeler, i), "#.##"), true)
                f_print(5, 11 + i, kirmizi, str.tostring(array.get(sl_pnl, i), "#.##") + " $", true)

        f_title(0, 16, beyaz, "SL Sonuç", ""), f_merge(0, 16, 2, 16)
        f_print(3, 16, turuncu, "% " + str.tostring(sl_miktar_yuzde_toplam, "#.##"), true)
        f_print(4, 16, kirmizi, "% " + str.tostring(net_sl_pnl_yuzde, "#.##"), true)
        f_print(5, 16, kirmizi, str.tostring(net_sl_pnl, "#.##") + " $", true)

    if tp_miktar_yuzde_hatasi
        f_print(0, 17, beyaz, "UYARI: Aktif TP yüzdeleri toplamı %" + str.tostring(tp_miktar_yuzde_toplam) + ".\nToplamın %100 olması gerektiğini unutmayın!", true), f_merge(0, 17, 5, 17)
    if sl_miktar_yuzde_hatasi
        f_print(0, 18, beyaz, "UYARI: Aktif SL yüzdeleri toplamı %" + str.tostring(sl_miktar_yuzde_toplam) + ".\nToplamın %100 olması gerektiğini unutmayın!", true), f_merge(0, 18, 5, 18)

plotshape(barstate.isfirst, "@ dg_factor", shape.flag, location.bottom, #00000000, precision=1, editable=false)
